name: Release

on:
  push:
    branches:
      - "ci/*"
    tags:
      - "v*"

jobs:
  uberjar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: install-dependencies
        run: lein deps
      - name: Run tests
        run: lein kaocha --reporter documentation
      - name: build-uberjar
        run: lein uberjar && mv target/*-standalone.jar target/app.jar
      - name: upload-uberjar
        uses: actions/upload-artifact@v1
        with:
          name: uberjar
          path: target/app.jar
      - name: build-standalone-jar
        run: |
          echo '#!/bin/sh' > into.jar
          echo 'SELF=`which "$0" 2>/dev/null`' >> into.jar
          echo '[ $? -gt 0 -a -f "$0" ] && SELF="./$0"' >> into.jar
          echo 'exec java -jar "$SELF" "$@"' >> into.jar
          echo 'exit 1' >> into.jar
          cat target/app.jar >> into.jar
          chmod +x into.jar
      - name: upload-standalone-jar
        uses: actions/upload-artifact@v1
        with:
          name: standalone-jar
          path: into.jar

  create-native-image:
    strategy:
      matrix:
        build:
          - "linux-amd64"
          - "linux-amd64-static"
          - "macos-amd64"
          - "windows-amd64"
        include:
          - build: "linux-amd64"
            os: "ubuntu-latest"
            flags: ""
          - build: "linux-amd64-static"
            os: "ubuntu-latest"
            flags: "--static"
          - build: "macos-amd64"
            os: "macos-latest"
            flags: ""
          - build: "windows-amd64"
            os: "windows-latest"
            flags: ""
    needs: uberjar
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: setup-graalvm-ce
        uses: DeLaGuardo/setup-graalvm@4.0
        with:
          graalvm: "20.3.0"
          java: "java11"

      - name: setup-paths
        id: paths
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo ::set-output name=gu::gu.cmd
            echo ::set-output name=native-image::native-image.cmd
            echo ::set-output name=artifact::into.exe
          else
            echo ::set-output name=gu::gu
            echo ::set-output name=native-image::native-image
            echo ::set-output name=artifact::into
          fi
        shell: bash

      - name: setup-native-image
        run: ${{ steps.paths.outputs.gu }} install native-image
      - name: setup-windows-toolchain
        uses: ilammy/msvc-dev-cmd@v1
        if: startsWith(matrix.build, 'windows-')
      - name: download-uberjar
        uses: actions/download-artifact@v1
        with:
          name: uberjar
      - name: native-image
        run: |
          ${{ steps.paths.outputs.native-image }} -jar uberjar/app.jar \
            -H:Name=into \
            --no-fallback \
            --no-server \
            ${{ matrix.flags }}
        shell: bash
      - name: verify-native-image
        run: |
          export ARTIFACT="${{ github.workspace }}/${{ steps.paths.outputs.artifact }}"
          chmod +x "$ARTIFACT"
          "$ARTIFACT" --version
        shell: bash
      - name: upload-native-image
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.build }}
          path: ${{ steps.paths.outputs.artifact }}

  test-native-image:
    needs: [create-native-image]
    strategy:
      matrix:
        build:
          # We cannot run the actual e2e test for all binaries here since the
          # Windows runner is not configured to be able to use Linux images, and
          # the MacOS runner does not even have Docker. Once that changes, we can
          # merge this whole job with the one above.
          - "linux-amd64"
          - "linux-amd64-static"
        include:
          - build: "linux-amd64"
            os: "ubuntu-latest"
          - build: "linux-amd64-static"
            os: "ubuntu-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: download-native-image
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.build }}
      - name: run-e2e-test
        run: |
          export ARTIFACT="${{ github.workspace }}/${{ matrix.build }}/into"
          chmod +x "$ARTIFACT"
          sh test/e2e/test.sh "$GITHUB_SHA" "$ARTIFACT build"
        env:
          DOCKER_API_VERSION: "1.40"

  create-release:
    needs: [test-native-image]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: export-version
        id: version
        run: echo ::set-output name=value::${GITHUB_REF/refs\/tags\/v/}
      - name: create-release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ steps.version.outputs.value }}
          body: |
            Version ${{ steps.version.outputs.value }}
          draft: true
          prerelease: false
      - name: store-upload-url
        run: echo "${{ steps.create_release.outputs.upload_url }}" > upload_url.txt
      - name: upload-release-data
        uses: actions/upload-artifact@v1
        with:
          name: release
          path: upload_url.txt

  upload-native-release-artifact:
    strategy:
      matrix:
        build:
          [
            "linux-amd64",
            "linux-amd64-static",
            "macos-amd64",
            "windows-amd64",
            "standalone-jar",
          ]
    needs: create-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: fetch-release-data
        uses: actions/download-artifact@v1
        with:
          name: release
      - name: export-version
        id: version
        run: echo ::set-output name=value::${GITHUB_REF/refs\/tags\/v/}
      - name: export-upload-url
        id: upload_url
        run: echo ::set-output name=value::$(cat release/upload_url.txt)
      - name: download-native-image
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.build }}
      - name: zip-native-image
        run: cd ${{ matrix.build }} && zip into.zip *
      - name: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload_url.outputs.value }}
          asset_path: ./${{ matrix.build }}/into.zip
          asset_name: into-${{ steps.version.outputs.value }}-${{ matrix.build }}.zip
          asset_content_type: application/zip
